{"./":{"url":"./","title":"Introduction","keywords":"","body":"Grid-EYE Syetem Pulse Audio モジュール手順書 Rev. 作成日 R0.01 2021/12/07 来歴 Rev. 作成日 変更内容 R0.00 2021/12/06 新規作成 R0.01 2021/12/07 可視化表示追加 "},"src/md/chpt0000.html":{"url":"src/md/chpt0000.html","title":"はじめに","keywords":"","body":"はじめに 本書はGrid-EYE Syetem Pulse Audio モジュールに関する手順書である。 参考のために、Synerexに関する記述も一部含んでいるが、詳細についてはSynerex手順書を参照のこと。 "},"src/md/chpt0100.html":{"url":"src/md/chpt0100.html","title":"1.概要","keywords":"","body":"1.概要 本書は、以下の手順について説明する。 ラズパイ環境におけるGrid-EYE Syetem Pulse Audio モジュールについて 環境変数の設定 Pulse Audio モジュールのインストール Pulse Audio モジュールの起動 Pulse Audio モジュールの実行結果 Pulse Audio データの可視化について Pulse Audio データの可視化概要 audioserveのインストール audioserveの起動と可視化表示 "},"src/md/chpt0200.html":{"url":"src/md/chpt0200.html","title":"2.前提条件","keywords":"","body":"2.前提条件 前提条件を以下に示す。 必要な機器 必要なモジュールを以下に示す。 # 内容 条件 備考 1 ラズパイ本体 必須 - 2 マイク機器 必須 ラズパイに接続できるもの（USB、Bluetooth） 必要なソフトウェア 必要なモジュールを以下に示す。 # 内容 条件 備考 1 Git 必須 2 Go 必須 3 Synerex Server ※ 必須 別PCでも可 4 Synerex Node Server ※ 必須 別PCでも可 ※事前に稼働していること "},"src/md/chpt0300.html":{"url":"src/md/chpt0300.html","title":"3.環境変数の設定","keywords":"","body":"3.環境変数の設定 特になし "},"src/md/chpt0400.html":{"url":"src/md/chpt0400.html","title":"4.Pulse Audio モジュールのインストール","keywords":"","body":"4.Pulse Audio モジュールのインストール ターミナルから以下のコマンドを実行しインストールする。 $ cd xxxx(任意のインストール先フォルダ） $ git clone https://github.com/synerex/provider_pulseaudio_tx ビルド ターミナルから以下のコマンドを実行しビルドを実施する。 $ cd provider_pulseaudio_tx $ go build "},"src/md/chpt0500.html":{"url":"src/md/chpt0500.html","title":"5.Pulse Audio モジュールの起動","keywords":"","body":"5.Pulse Audio モジュールの起動 モジュールを起動するためのコマンド（例）を以下に記述する。 ※実行前にSynerex Serverおよび、Synerex Node Serverが稼働していること。 $ cd provider_pulseaudio_tx $ ./pulse_tx -verbose -threshold 0.015 -nodesrv 192.168.207.165:9990 パラメタ # パラメタ 内容 記述例 1 nodesrv Node ID ServerのURL -nodesrv 127.0.0.1:9990 2 local ローカルSynerexサーバーを指定 -local 3 fragment 音声データ取り込みバッファサイズ -fragment 2048 4 rate 音声データ サンプリングレート -rate 44100 5 verbose 音声データ内容の表示要否 -verbose 6 nosend -nosend 7 threshold 音声データ 閾値 -threshold 0.015 備考 Synerex Server起動例 ./synerex-server --servaddr 192.168.207.165 -nodeaddr 192.168.207.165 Synerex Node Server起動例 ./nodeserv --addr 192.168.207.165 "},"src/md/chpt0600.html":{"url":"src/md/chpt0600.html","title":"6.Pulse Audio モジュールの実行結果","keywords":"","body":"6.Pulse Audio モジュールの実行結果 モジュール実行時の表示内容を以下に記述する。 ※起動時に-verboseパラメタを指定しておくこと。 表示例 Audio Power 4 0.002372, datalen:512 timeDiff(nsec):1638518489789507768 Audio Power 7 0.016089(Over Threshold), datalen:512 timeDiff(nsec):13963693 表示内容 # 表示データ 内容 備考 1 Audio Power X 音圧レベル平均値から算出した音声指標値 2 9.999999 音圧レベル（音声データサイズ分の平均値） -thresholdパラメタ値を超える場合「(Over Threshold)」を付加する 3 datalen: 999 音声データサイズ 4 timeDiff(nsec):9999~ 処理時間 前回結果表示からの経過時間 "},"src/md/chpt0700.html":{"url":"src/md/chpt0700.html","title":"7.Pulse Audio データの可視化概要","keywords":"","body":"7.Pulse Audio データの可視化概要 前章で記したPulse Audioモジュールデータを、ブラウザにて可視化する「audioserve」について記述する。 audioserveのインストール機器は、ラズパイ、synerex以外の機器においても動作が可能。 （構成図の貼付予定） audioserve実行するための前提条件を以下に示す。 必要なモジュール # モジュール 備考 1 yarn 2 python3.x 3 synerex/provider_proxy https://github.com/synerex/provider_proxy 必要なPython 3 ライブラリ # モジュール インストール方法 1 grpcio-tools pip install grpcio-tools 2 futures pip install futures 3 protobuf3 pip install protobuf3 4 opencv-contrib-python pip install opencv-contrib-python 5 websockets pip install websockets "},"src/md/chpt0800.html":{"url":"src/md/chpt0800.html","title":"8.audioserveのインストール","keywords":"","body":"8.audioserveのインストール ターミナルから以下のコマンドを実行しインストールする。 $ cd xxxx(任意のインストール先フォルダ） $ git clone https://bitbucket.org/uclabnu/python_provider_grideye/ $ cd python_provider_grideye $ git checkout with-pulseaudio gRPCの設定 （カレントディレクトリ：python_provider_grideye） $ git submodule update --init --recursive $ python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./api/synerex.proto $ python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./nodeapi/nodeapi.proto $ python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./proto/grideye/grideye.proto ビルド ターミナルから以下のコマンドを実行しビルドを実施する。 （カレントディレクトリ：python_provider_grideye） $ cd client $ yarn $ yarn build "},"src/md/chpt0900.html":{"url":"src/md/chpt0900.html","title":"9.audioserveの起動と可視化表示","keywords":"","body":"9.audioserveの起動と可視化表示 audioserveを起動するためのコマンド（例）を以下に記述する。 Synerex Proxy起動（例） ./proxy -nodesrv 192.168.207.165:9990 -channel 19 -verbose audioserveの起動 新しいターミナルを開き以下実行する。 （カレントディレクトリ：python_provider_grideye） $ python receiveSupply.py webpage serverの起動 新しいターミナルを開き以下実行する。 （カレントディレクトリ：python_provider_grideye） $ cd client/build $ python -m http.sever 可視化表示 ブラウザを立ち上げ、URLに「127.0.0.1:8000」を入力する。 表示が切り替わらない場合は、前項「webpage server」をctrl+cで一度停止し、再度実行すると表示することがある。 "}}